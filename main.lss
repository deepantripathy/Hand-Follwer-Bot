
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000a0  008000a0  000004a0  2**0
                  ALLOC
  3 .stab         00000c9c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000081b  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  8a:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dely_ns>:
}

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
  92:	10 92 a1 00 	sts	0x00A1, r1
  96:	20 91 a0 00 	lds	r18, 0x00A0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <dely_ns+0x10>
  9e:	9f 5f       	subi	r25, 0xFF	; 255
  a0:	2b e0       	ldi	r18, 0x0B	; 11
  a2:	98 17       	cp	r25, r24
  a4:	e0 f3       	brcs	.-8      	; 0x9e <dely_ns+0xc>
  a6:	20 93 a0 00 	sts	0x00A0, r18
  aa:	90 93 a1 00 	sts	0x00A1, r25
  ae:	08 95       	ret

000000b0 <latch>:
  b0:	aa 98       	cbi	0x15, 2	; 21
  b2:	88 ec       	ldi	r24, 0xC8	; 200
  b4:	0e 94 49 00 	call	0x92	; 0x92 <dely_ns>
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	88 ec       	ldi	r24, 0xC8	; 200
  bc:	0e 94 49 00 	call	0x92	; 0x92 <dely_ns>
  c0:	aa 98       	cbi	0x15, 2	; 21
  c2:	08 95       	ret

000000c4 <lcd_cmd>:
	{
		for(k=0;k<11;k++)
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	88 7f       	andi	r24, 0xF8	; 248
  ce:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
  d0:	80 2f       	mov	r24, r16
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	85 bb       	out	0x15, r24	; 21
	latch();
  d6:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
	PORTC=(((cmd&(0x0F))*16));	
  da:	11 27       	eor	r17, r17
  dc:	0f 70       	andi	r16, 0x0F	; 15
  de:	10 70       	andi	r17, 0x00	; 0
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	00 0f       	add	r16, r16
  e4:	11 1f       	adc	r17, r17
  e6:	8a 95       	dec	r24
  e8:	e1 f7       	brne	.-8      	; 0xe2 <lcd_cmd+0x1e>
  ea:	05 bb       	out	0x15, r16	; 21
	latch();
  ec:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <lcd_char>:
}


void lcd_char(unsigned char single)
{
  f6:	1f 93       	push	r17
  f8:	18 2f       	mov	r17, r24
	PORTC=0x01;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
  fe:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
 100:	81 2f       	mov	r24, r17
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	81 60       	ori	r24, 0x01	; 1
 106:	85 bb       	out	0x15, r24	; 21
	latch();
 108:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
	PORTC=((single&(0x0F))*16)|0x01;
 10c:	12 95       	swap	r17
 10e:	10 7f       	andi	r17, 0xF0	; 240
 110:	11 60       	ori	r17, 0x01	; 1
 112:	15 bb       	out	0x15, r17	; 21
	latch();
 114:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
 118:	1f 91       	pop	r17
 11a:	08 95       	ret

0000011c <lcd_string>:
}

void lcd_string(unsigned char str[32])
{
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
 12e:	15 ba       	out	0x15, r1	; 21
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	14 c0       	rjmp	.+40     	; 0x15e <lcd_string+0x42>
		while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 136:	90 31       	cpi	r25, 0x10	; 16
 138:	19 f4       	brne	.+6      	; 0x140 <lcd_string+0x24>
				lcd_cmd(0XC0);
 13a:	80 ec       	ldi	r24, 0xC0	; 192
 13c:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
			PORTC=((str[k])&0xF0)|0x01;
 140:	88 81       	ld	r24, Y
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	81 60       	ori	r24, 0x01	; 1
 146:	85 bb       	out	0x15, r24	; 21
			latch();
 148:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
			PORTC=((str[k]&(0x0F))*16)|0x01;
 14c:	88 81       	ld	r24, Y
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	81 60       	ori	r24, 0x01	; 1
 154:	85 bb       	out	0x15, r24	; 21
			latch();
 156:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	90 2f       	mov	r25, r16
 160:	e7 01       	movw	r28, r14
 162:	c0 0f       	add	r28, r16
 164:	d1 1d       	adc	r29, r1
 166:	88 81       	ld	r24, Y
 168:	88 23       	and	r24, r24
 16a:	29 f7       	brne	.-54     	; 0x136 <lcd_string+0x1a>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <lcd_showvalue>:
			k++;
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	d8 2e       	mov	r13, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 186:	64 e6       	ldi	r22, 0x64	; 100
 188:	0e 94 b2 01 	call	0x364	; 0x364 <__udivmodqi4>
 18c:	28 2f       	mov	r18, r24
	T=(num - (H*100))/10;
 18e:	94 e6       	ldi	r25, 0x64	; 100
 190:	e9 2e       	mov	r14, r25
 192:	8e 9d       	mul	r24, r14
 194:	70 01       	movw	r14, r0
 196:	11 24       	eor	r1, r1
 198:	8d 2d       	mov	r24, r13
 19a:	99 27       	eor	r25, r25
 19c:	8e 19       	sub	r24, r14
 19e:	9f 09       	sbc	r25, r15
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
 1a8:	8b 01       	movw	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 1aa:	82 2f       	mov	r24, r18
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
	lcd_char(T+48);
 1b2:	80 2f       	mov	r24, r16
 1b4:	80 5d       	subi	r24, 0xD0	; 208
 1b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
	lcd_char(O+48);
 1ba:	de 18       	sub	r13, r14
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	08 9f       	mul	r16, r24
 1c0:	c0 01       	movw	r24, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	d8 1a       	sub	r13, r24
 1c6:	8d 2d       	mov	r24, r13
 1c8:	80 5d       	subi	r24, 0xD0	; 208
 1ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	08 95       	ret

000001da <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 1da:	88 23       	and	r24, r24
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <lcd_gotoxy+0xe>
    {
	 lcd_cmd(0x80+column);
 1de:	86 2f       	mov	r24, r22
 1e0:	80 58       	subi	r24, 0x80	; 128
 1e2:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 1e6:	08 95       	ret
	}
   else if(row==1)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <lcd_gotoxy+0x1a>
	{
	 lcd_cmd(0xC0+column);	
 1ec:	86 2f       	mov	r24, r22
 1ee:	80 54       	subi	r24, 0x40	; 64
 1f0:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 1f4:	08 95       	ret

000001f6 <delay_ms>:
	}	
}


void delay_ms(unsigned int ms)
{
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <delay_ms+0x14>
	int i;

	while (ms-- > 0)
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 1fc:	00 00       	nop
 1fe:	2f 5f       	subi	r18, 0xFF	; 255
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	4c e0       	ldi	r20, 0x0C	; 12
 204:	2c 3c       	cpi	r18, 0xCC	; 204
 206:	34 07       	cpc	r19, r20
 208:	c9 f7       	brne	.-14     	; 0x1fc <delay_ms+0x6>
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	8f 3f       	cpi	r24, 0xFF	; 255
 210:	92 07       	cpc	r25, r18
 212:	91 f7       	brne	.-28     	; 0x1f8 <delay_ms+0x2>
 214:	08 95       	ret

00000216 <lcd_init>:
 216:	84 e1       	ldi	r24, 0x14	; 20
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_ms>
 21e:	85 b3       	in	r24, 0x15	; 21
 220:	80 93 a2 00 	sts	0x00A2, r24
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	84 bb       	out	0x14, r24	; 20
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_ms>
 230:	80 e2       	ldi	r24, 0x20	; 32
 232:	85 bb       	out	0x15, r24	; 21
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 246:	84 e1       	ldi	r24, 0x14	; 20
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_ms>
 24e:	08 95       	ret

00000250 <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 256:	08 95       	ret

00000258 <delayms>:
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 258:	10 92 a6 00 	sts	0x00A6, r1
 25c:	10 92 a5 00 	sts	0x00A5, r1
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0
	...
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 280:	4f 5f       	subi	r20, 0xFF	; 255
 282:	5f 4f       	sbci	r21, 0xFF	; 255
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	41 32       	cpi	r20, 0x21	; 33
 288:	56 07       	cpc	r21, r22
 28a:	71 f7       	brne	.-36     	; 0x268 <delayms+0x10>
 28c:	2f 5f       	subi	r18, 0xFF	; 255
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	82 17       	cp	r24, r18
 292:	93 07       	cpc	r25, r19
 294:	38 f7       	brcc	.-50     	; 0x264 <delayms+0xc>
 296:	30 93 a6 00 	sts	0x00A6, r19
 29a:	20 93 a5 00 	sts	0x00A5, r18
 29e:	50 93 a4 00 	sts	0x00A4, r21
 2a2:	40 93 a3 00 	sts	0x00A3, r20
 2a6:	08 95       	ret

000002a8 <delayus>:
		  }
		
	 }
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 2a8:	10 92 a6 00 	sts	0x00A6, r1
 2ac:	10 92 a5 00 	sts	0x00A5, r1
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
	...
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
 2c8:	2f 5f       	subi	r18, 0xFF	; 255
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	82 17       	cp	r24, r18
 2ce:	93 07       	cpc	r25, r19
 2d0:	88 f7       	brcc	.-30     	; 0x2b4 <delayus+0xc>
 2d2:	30 93 a6 00 	sts	0x00A6, r19
 2d6:	20 93 a5 00 	sts	0x00A5, r18
 2da:	08 95       	ret

000002dc <main>:
#include <delay.h>

int main(void)
{
	DDRA=0x00;
 2dc:	1a ba       	out	0x1a, r1	; 26
	PORTA=0x00;
 2de:	1b ba       	out	0x1b, r1	; 27
	DDRB=0xF0;
 2e0:	80 ef       	ldi	r24, 0xF0	; 240
 2e2:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
 2e4:	18 ba       	out	0x18, r1	; 24
	
	lcd_init();
 2e6:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_init>
	lcd_gotoxy(0,1);
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
	lcd_string("show hand");
 2f2:	80 e6       	ldi	r24, 0x60	; 96
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
	
	while(1)
	{
	
	
		if(bit_is_clear(PINA,PA5))
 2fa:	cd 99       	sbic	0x19, 5	; 25
 2fc:	09 c0       	rjmp	.+18     	; 0x310 <main+0x34>
		{
			PORTB=0x80;
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	88 bb       	out	0x18, r24	; 24
			lcd_gotoxy(0,1);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
			lcd_string("left turn");
 30a:	8a e6       	ldi	r24, 0x6A	; 106
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	f3 cf       	rjmp	.-26     	; 0x2f6 <main+0x1a>
		}
		
		else
		if(bit_is_clear(PINA,PA2))
 310:	ca 99       	sbic	0x19, 2	; 25
 312:	09 c0       	rjmp	.+18     	; 0x326 <main+0x4a>
		{
			PORTB=0xA0;
 314:	80 ea       	ldi	r24, 0xA0	; 160
 316:	88 bb       	out	0x18, r24	; 24
			lcd_gotoxy(0,1);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
			lcd_string("Forward  ");
 320:	84 e7       	ldi	r24, 0x74	; 116
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	e8 cf       	rjmp	.-48     	; 0x2f6 <main+0x1a>
		}
		
		else
		if(bit_is_clear(PINA,PA1))
 326:	c9 99       	sbic	0x19, 1	; 25
 328:	09 c0       	rjmp	.+18     	; 0x33c <main+0x60>
		{
			PORTB=0x20;
 32a:	80 e2       	ldi	r24, 0x20	; 32
 32c:	88 bb       	out	0x18, r24	; 24
			lcd_gotoxy(0,1);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
			lcd_string("right turn");
 336:	8e e7       	ldi	r24, 0x7E	; 126
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	dd cf       	rjmp	.-70     	; 0x2f6 <main+0x1a>
		}
		
		else
		{
			PORTB=0x00;
 33c:	18 ba       	out	0x18, r1	; 24
			lcd_gotoxy(0,1);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
			lcd_string("stop      ");
 346:	89 e8       	ldi	r24, 0x89	; 137
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
			delayms(100);
 34e:	84 e6       	ldi	r24, 0x64	; 100
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 2c 01 	call	0x258	; 0x258 <delayms>
			lcd_gotoxy(0,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
			lcd_string("show hand ");
 35e:	84 e9       	ldi	r24, 0x94	; 148
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	c9 cf       	rjmp	.-110    	; 0x2f6 <main+0x1a>

00000364 <__udivmodqi4>:
 364:	99 1b       	sub	r25, r25
 366:	79 e0       	ldi	r23, 0x09	; 9
 368:	04 c0       	rjmp	.+8      	; 0x372 <__udivmodqi4_ep>

0000036a <__udivmodqi4_loop>:
 36a:	99 1f       	adc	r25, r25
 36c:	96 17       	cp	r25, r22
 36e:	08 f0       	brcs	.+2      	; 0x372 <__udivmodqi4_ep>
 370:	96 1b       	sub	r25, r22

00000372 <__udivmodqi4_ep>:
 372:	88 1f       	adc	r24, r24
 374:	7a 95       	dec	r23
 376:	c9 f7       	brne	.-14     	; 0x36a <__udivmodqi4_loop>
 378:	80 95       	com	r24
 37a:	08 95       	ret

0000037c <__divmodhi4>:
 37c:	97 fb       	bst	r25, 7
 37e:	09 2e       	mov	r0, r25
 380:	07 26       	eor	r0, r23
 382:	0a d0       	rcall	.+20     	; 0x398 <__divmodhi4_neg1>
 384:	77 fd       	sbrc	r23, 7
 386:	04 d0       	rcall	.+8      	; 0x390 <__divmodhi4_neg2>
 388:	0c d0       	rcall	.+24     	; 0x3a2 <__udivmodhi4>
 38a:	06 d0       	rcall	.+12     	; 0x398 <__divmodhi4_neg1>
 38c:	00 20       	and	r0, r0
 38e:	1a f4       	brpl	.+6      	; 0x396 <__divmodhi4_exit>

00000390 <__divmodhi4_neg2>:
 390:	70 95       	com	r23
 392:	61 95       	neg	r22
 394:	7f 4f       	sbci	r23, 0xFF	; 255

00000396 <__divmodhi4_exit>:
 396:	08 95       	ret

00000398 <__divmodhi4_neg1>:
 398:	f6 f7       	brtc	.-4      	; 0x396 <__divmodhi4_exit>
 39a:	90 95       	com	r25
 39c:	81 95       	neg	r24
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	08 95       	ret

000003a2 <__udivmodhi4>:
 3a2:	aa 1b       	sub	r26, r26
 3a4:	bb 1b       	sub	r27, r27
 3a6:	51 e1       	ldi	r21, 0x11	; 17
 3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <__udivmodhi4_ep>

000003aa <__udivmodhi4_loop>:
 3aa:	aa 1f       	adc	r26, r26
 3ac:	bb 1f       	adc	r27, r27
 3ae:	a6 17       	cp	r26, r22
 3b0:	b7 07       	cpc	r27, r23
 3b2:	10 f0       	brcs	.+4      	; 0x3b8 <__udivmodhi4_ep>
 3b4:	a6 1b       	sub	r26, r22
 3b6:	b7 0b       	sbc	r27, r23

000003b8 <__udivmodhi4_ep>:
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	5a 95       	dec	r21
 3be:	a9 f7       	brne	.-22     	; 0x3aa <__udivmodhi4_loop>
 3c0:	80 95       	com	r24
 3c2:	90 95       	com	r25
 3c4:	bc 01       	movw	r22, r24
 3c6:	cd 01       	movw	r24, r26
 3c8:	08 95       	ret

000003ca <_exit>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <_exit>
